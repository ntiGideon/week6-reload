AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete infrastructure for highly available containerized image application including VPC, ECS, and ALB'

Parameters:
  EnvironmentName:
    Description: 'An environment name that is prefixed to resource names'
    Type: String
    Default: 'FotoApp'

  ECRRepositoryName:
    Description: 'Name of the ECR repository'
    Type: String
    Default: 'springboot-image-app'

  ImageTag:
    Description: 'Tag of the Docker image to deploy'
    Type: String
    Default: 'latest'

  DesiredCount:
    Description: 'Number of tasks to run'
    Type: Number
    Default: 2

  ContainerPort:
    Description: 'Port that the container listens on'
    Type: Number
    Default: 8000

  HostPort:
    Description: 'Port that the host listens on'
    Type: Number
    Default: 8000

  ContainerMemory:
    Description: 'Memory to allocate to the container (MB)'
    Type: Number
    Default: 512

  ContainerCPU:
    Description: 'CPU units to allocate to the container (1 vCPU = 1024)'
    Type: Number
    Default: 256

  SecretsManagerArn:
    Description: 'ARN of the Secrets Manager secret containing application secrets'
    Type: String
    Default: 'arn:aws:secretsmanager:eu-central-1:767828749690:secret:ImageAppSecrets-PR4NkN'
  AppPort:
    Description: 'App Port'
    Type: String
    Default: 8000

Resources:
  # VPC Infrastructure
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-IGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.3.0/24
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.4.0/24
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-PrivateSubnet2

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-NatGateway1EIP

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-NatGateway2EIP

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-NatGateway1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-NatGateway2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-PrivateRouteTable1

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-PrivateRouteTable2

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-ALBSecurityGroup
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-ALBSecurityGroup

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-ECSSecurityGroup
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8000
        ToPort: 8000
        SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-ECSSecurityGroup

  # ECS Cluster and Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-Cluster
      CapacityProviders:
      - FARGATE
      - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
      - CapacityProvider: FARGATE
        Weight: 1
        Base: 1

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-ALB
      Scheme: internet-facing
      Type: application
      SecurityGroups:
      - !Ref ALBSecurityGroup
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ALB
    Properties:
      Name: !Sub ${EnvironmentName}-TG
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /actuator/health
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: '200-499'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
    - ALB
    - ALBTargetGroup
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
  ALBTestListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 9000 # Test listener port
      Protocol: HTTP
  ALBGreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-GreenTG
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /actuator/health
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: '200-499'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: !Sub ${EnvironmentName}-ECSTaskExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:GetObject
            - s3:PutObject
            - s3:ListBucket
            - secretsmanager:GetSecretValue
            Resource: '*'

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-Task
      RetentionInDays: 7

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-Task
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Cpu: !Ref ContainerCPU
      Memory: !Ref ContainerMemory
      ContainerDefinitions:
      - Name: !Sub ${EnvironmentName}-Container
        Image: 767828749690.dkr.ecr.eu-central-1.amazonaws.com/springboot-image-app:latest
        PortMappings:
        - ContainerPort: !Ref ContainerPort
          HostPort: !Ref HostPort
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudWatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs
        Environment:
        - Name: SPRING_PROFILES_ACTIVE
          Value: production
        - Name: AWS_REGION
          Value: eu-central-1
        - Name: AWS_BUCKET_NAME
          Value: fotografi-app
        Secrets:
        - Name: DATABASE_URL
          ValueFrom: "arn:aws:secretsmanager:eu-central-1:767828749690:secret:ImageAppSecrets-PR4NkN:DATABASE_URL::"
        - Name: DATABASE_USERNAME
          ValueFrom: "arn:aws:secretsmanager:eu-central-1:767828749690:secret:ImageAppSecrets-PR4NkN:DATABASE_USERNAME::"
        - Name: DATABASE_PASSWORD
          ValueFrom: "arn:aws:secretsmanager:eu-central-1:767828749690:secret:ImageAppSecrets-PR4NkN:DATABASE_PASSWORD::"
        - Name: AWS_ACCESS_KEY
          ValueFrom: "arn:aws:secretsmanager:eu-central-1:767828749690:secret:ImageAppSecrets-PR4NkN:AWS_ACCESS_KEY::"
        - Name: AWS_SECRET_KEY
          ValueFrom: "arn:aws:secretsmanager:eu-central-1:767828749690:secret:ImageAppSecrets-PR4NkN:AWS_SECRET_KEY::"

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
    - ALBListener
    - ALBTargetGroup
    - ECSTaskDefinition
    Properties:
      ServiceName: !Sub ${EnvironmentName}-Service
      DeploymentController:
        Type: CODE_DEPLOY
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 120
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - !Ref ECSSecurityGroup
          Subnets:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      LoadBalancers:
      - ContainerName: !Sub ${EnvironmentName}-Container
        ContainerPort: !Ref ContainerPort
        TargetGroupArn: !Ref ALBTargetGroup
      TaskDefinition: !Ref ECSTaskDefinition

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: application-autoscaling.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - application-autoscaling:*
            - cloudwatch:DescribeAlarms
            - cloudwatch:PutMetricAlarm
            - ecs:DescribeServices
            - ecs:UpdateService
            Resource: '*'

  ECSServiceAutoScaling:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      MaxCapacity: 4
      MinCapacity: 2
      ResourceId: !Sub "service/${ECSCluster}/${ECSService.Name}"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  ECSServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ECSServiceAutoScaling
    Properties:
      PolicyName: !Sub ${EnvironmentName}-ScaleOutPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceAutoScaling
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  CPUUtilizationAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    DependsOn: ECSServiceAutoScaling
    Properties:
      AlarmDescription: 'Alarm if CPU too high or metric disappears indicating instance is down'
      Namespace: 'AWS/ECS'
      MetricName: 'CPUUtilization'
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      - Name: ServiceName
        Value: !GetAtt ECSService.Name
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
      - !Ref ECSServiceScalingPolicy

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codedeploy.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: CodeDeployServiceRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ecs:*
            - elasticloadbalancing:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - iam:PassRole
            Resource: "*"

  # CodeDeploy Application
  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${EnvironmentName}-App
      ComputePlatform: ECS

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApp
      DeploymentGroupName: !Sub ${EnvironmentName}-DeploymentGroup
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      ECSServices:
      - ServiceName: !GetAtt ECSService.Name
        ClusterName: !Ref ECSCluster
      LoadBalancerInfo:
        TargetGroupPairInfoList:
        - TargetGroups:
          - Name: !Sub ${EnvironmentName}-TG
          - Name: !Sub ${EnvironmentName}-GreenTG
          ProdTrafficRoute:
            ListenerArns:
            - !Ref ALBListener
          TestTrafficRoute:
            ListenerArns:
            - !Ref ALBTestListener
      AutoRollbackConfiguration:
        Enabled: true
        Events:
        - DEPLOYMENT_FAILURE
        - DEPLOYMENT_STOP_ON_ALARM

  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: fotoshop
      ImageScanningConfiguration:
        ScanOnPush: true

Outputs:
  VPCId:
    Description: The VPC Id
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCId

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet1Id

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet2Id

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet1Id

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet2Id

  ALBSecurityGroupId:
    Description: ALB Security Group ID
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-ALBSecurityGroupId

  ECSSecurityGroupId:
    Description: ECS Security Group ID
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-ECSSecurityGroupId

  ALBDNSName:
    Description: 'DNS name of the ALB'
    Value: !GetAtt ALB.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-ALBDNSName

  ECSClusterName:
    Description: 'Name of the ECS Cluster'
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${EnvironmentName}-ECSClusterName
